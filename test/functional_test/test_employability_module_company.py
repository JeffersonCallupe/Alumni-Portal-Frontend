# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options


class TestEmployabilityModuleCompany():
    def setup_method(self, method):
        # Crear objeto de opciones de Chrome
        options = Options()
        # Desactivar GPU
        options.add_argument("--disable-gpu")
        # Ejecutar en modo headless (sin interfaz gráfica)
        options.add_argument("--headless")
        # Inicializar el driver con las opciones configuradas
        self.driver = webdriver.Chrome(options=options)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_job_offer_company(self):
        # Navigate to the page
        self.driver.get("http://localhost:5173/")

        # Assert that the driver is not null and the page is loaded
        assert self.driver is not None, "WebDriver initialization failed"
        assert "localhost" in self.driver.current_url, "Failed to load the correct page"

        # Set window size
        self.driver.set_window_size(1296, 688)

        # Find and click initial elements
        initial_element = self.driver.find_element(By.ID, ":r1:")
        assert initial_element is not None, "Initial element not found"
        initial_element.click()

        # Assert form elements are present and interactable
        form_element = self.driver.find_element(
            By.CSS_SELECTOR, ".form-responsive-width")
        assert form_element is not None, "Form element not found"
        form_element.click()

        # Login as company
        login_link = self.driver.find_element(
            By.LINK_TEXT, "Iniciar sesión como empresa")
        assert login_link is not None, "Company login link not found"
        login_link.click()

        # Enter email
        email_input = self.driver.find_element(By.XPATH, "//input[@id=':r1:']")
        assert email_input is not None, "Email input not found"
        email_input.click()
        email_input.send_keys("p@gmail.com")

        # Enter password
        password_input = self.driver.find_element(By.ID, ":r3:")
        assert password_input is not None, "Password input not found"
        password_input.send_keys("prueba0")

        # Submit login
        submit_button = self.driver.find_element(
            By.XPATH, "//button[@type='submit']")
        assert submit_button is not None, "Submit button not found"
        submit_button.click()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        # Wait and add assertion for page transition
        time.sleep(3)
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()

        # Validar y hacer clic en el botón con imagen
        button_img = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/header/div/div/div[3]/button[2]/img")
        assert button_img.is_enabled(), "El botón con imagen no está visible"
        button_img.click()

        # Validar y hacer clic en "Ver ofertas"
        ver_ofertas = self.driver.find_element(
            By.XPATH, "(//a[contains(@href, '/ofertasHistorico')])[2]")
        assert ver_ofertas.is_enabled(), "El enlace 'Ver ofertas' no está habilitado"
        ver_ofertas.click()

        # Validar y hacer clic en el primer autocomplete
        autocomplete1 = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiAutocomplete-root:nth-child(1) .MuiSvgIcon-root")
        assert autocomplete1.is_displayed(), "El primer autocomplete no está visible"
        autocomplete1.click()

        # Validar y seleccionar la primera opción
        option = self.driver.find_element(
            By.XPATH, "//li[@id=':r5:-option-0']")
        assert option.is_displayed(), "Las opciones del autocomplete no están visibles"
        option.click()

        # Validar y hacer clic en el input
        input_element = self.driver.find_element(
            By.XPATH, "//input[@id=':r9:']")
        assert input_element.is_enabled(), "El campo de entrada no está habilitado"
        input_element.click()

        # Validar y hacer clic en el div contenedor
        div_container = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/div/main/div/div/div/div")
        assert div_container.is_enabled(), "El contenedor principal no está visible"
        div_container.click()

        # Validar y hacer clic en el segundo autocomplete
        element = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiAutocomplete-root:nth-child(2) .MuiSvgIcon-root")
        assert element.is_displayed(), "El segundo autocomplete no está visible"
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()

        # Validar y hacer clic en el segundo input
        input_element2 = self.driver.find_element(
            By.XPATH, "//input[@id=':rd:']")
        assert input_element2.is_enabled(), "El segundo campo de entrada no está habilitado"
        input_element2.click()

        # Validar y hacer clic en los botones
        button9 = self.driver.find_element(
            By.XPATH, "(//button[@type='button'])[9]")
        assert button9.is_enabled(), "El botón 9 no está habilitado"
        button9.click()

        element = self.driver.find_element(
            By.XPATH, "(//button[@type='button'])[10]")
        assert element.is_enabled(), "El botón 10 no está habilitado"
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element.click()

        # Validar y hacer clic en el logo
        logo = self.driver.find_element(By.XPATH, "(//img[@alt='Logo'])[3]")
        assert logo.is_displayed(), "El logo no está visible"
        logo.click()

        # Validar y hacer clic en "Mis ofertas publicadas"
        mis_ofertas = self.driver.find_element(
            By.XPATH, "(//a[contains(@href, '/ofertasLaborales')])[2]")
        assert mis_ofertas.is_enabled(), "El enlace 'Mis ofertas publicadas' no está visible"
        mis_ofertas.click()

        # Validar y hacer clic en el último botón
        last_button = self.driver.find_element(
            By.XPATH, "(//button[@type='button'])[5]")
        assert last_button.is_enabled(), "El último 5 no está habilitado"
        last_button.click()

        time.sleep(3)
        # Validar el formulario de oferta
        titulo_input = self.driver.find_element(
            By.XPATH, "//div[3]/div/div/form/div/div/input")
        assert titulo_input is not None, "El campo de título no existe"
        assert titulo_input.is_enabled(), "El campo de título no está habilitado"
        titulo_input.click()
        titulo_input.send_keys("a")
        assert titulo_input.get_attribute(
            "value") == "a", "El texto no se ingresó correctamente en el título"

        # Validar campo numérico
        num_input = self.driver.find_element(By.XPATH, "//div[2]/div/input")
        assert num_input.is_enabled(), "El campo numérico no está habilitado"
        num_input.click()
        num_input.send_keys("5")

        # Validar el campo de descripción
        descripcion = self.driver.find_element(By.XPATH, "//textarea")
        assert descripcion is not None, "El campo de descripción no existe"
        assert len(descripcion.get_attribute("value")
                   ) == 0, "El campo de descripción no está vacío inicialmente"
        descripcion.click()
        descripcion.send_keys("abv")
        assert len(descripcion.get_attribute("value")
                   ) > 0, "No se pudo ingresar texto en la descripción"

        # Validar campos numéricos adicionales
        input1 = self.driver.find_element(
            By.XPATH, "//div[4]/div[2]/div/div/input")
        assert input1.is_enabled(), "El primer campo numérico adicional no está habilitado"
        input1.click()
        input1.send_keys("10")

        input2 = self.driver.find_element(
            By.XPATH, "//div[4]/div[3]/div/div/input")
        assert input2.is_enabled(), "El segundo campo numérico adicional no está habilitado"
        input2.click()
        input2.send_keys("10")
        input3 = self.driver.find_element(
            By.XPATH, "//div[5]/div[2]/div/div/input")
        assert input3.is_enabled(), "El tercer campo numérico adicional no está habilitado"
        input3.click()
        input3.send_keys("10")

        input4 = self.driver.find_element(
            By.XPATH, "//div[5]/div[3]/div/div/input")
        assert input4.is_enabled(), "El cuarto campo numérico adicional no está habilitado"
        input4.click()

        # Validar el botón de actualización
        submit_button = self.driver.find_element(
            By.XPATH, "//button[@type='submit']")
        assert submit_button is not None, "El botón de actualizar no existe"
        assert submit_button.is_enabled(), "El botón de actualizar no está habilitado"
        submit_button.click()
        time.sleep(3)
        # Validar botones y elementos adicionales
        button11 = self.driver.find_element(
            By.XPATH, "(//button[@type='button'])[12]")
        assert button11.is_displayed(), "El botón 11 no está visible"
        actions = ActionChains(self.driver)
        actions.move_to_element(button11).perform()

        svg_icon = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiPaper-root:nth-child(1) > .MuiCardHeader-root .MuiButtonBase-root:nth-child(2)")
        assert svg_icon.is_enabled(), "El ícono SVG no está visible"
        actions.move_to_element(svg_icon).perform()
        svg_icon.click()

        # Validar el textarea de lorem ipsum
        textarea = self.driver.find_element(By.XPATH, "//textarea")
        assert textarea.is_enabled(), "El textarea no está habilitado"
        textarea.click()
        lorem_text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. abc"
        textarea.send_keys(lorem_text)

        # Validar botones finales
        submit_final = self.driver.find_element(
            By.XPATH, "//button[@type='submit']")
        assert submit_final.is_enabled(), "El botón final de envío no está habilitado"
        submit_final.click()
        profile_img = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/header/div/div/div[4]/button/div/img")
        assert profile_img.is_displayed(), "La imagen de perfil no está visible"
        actions = ActionChains(self.driver)
        actions.move_to_element(profile_img).perform()
        time.sleep(2)
        # Validar el cierre de sesión
        profile_img = self.driver.find_element(By.XPATH, "//button/div/img")
        assert profile_img is not None, "El menú de perfil no existe"
        profile_img.click()
        logout_option = self.driver.find_element(
            By.XPATH, "//div[@id='menu-appbar']/div[3]/ul/li[3]/p")
        assert logout_option is not None, "La opción de cerrar sesión no existe"
        logout_option.click()

        self.driver.close()
