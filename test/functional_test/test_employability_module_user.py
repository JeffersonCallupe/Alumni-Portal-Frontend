# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options


class TestEmployabilityModuleUser():
    def setup_method(self, method):
        # Crear objeto de opciones de Chrome
        options = Options()
        # Desactivar GPU
        options.add_argument("--disable-gpu")
        # Ejecutar en modo headless (sin interfaz gráfica)
        options.add_argument("--headless")
        # Inicializar el driver con las opciones configuradas
        self.driver = webdriver.Chrome(options=options)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def test_job_offer_user(self):
        # Validar carga inicial de la página
        self.driver.get("http://localhost:5173/")
        assert self.driver.current_url == "http://localhost:5173/", "La URL inicial no es correcta"
        self.driver.set_window_size(1440, 900)

        # Validar campos de login
        email_input = self.driver.find_element(By.ID, ":r1:")
        assert email_input is not None, "El campo de email no existe"
        assert email_input.is_enabled(), "El campo de email no está habilitado"
        email_input.click()
        email_input.send_keys("luis.balarezo@unmsm.edu.pe")
        assert email_input.get_attribute(
            "value") == "luis.balarezo@unmsm.edu.pe", "El email no se ingresó correctamente"

        # Validar campo de contraseña
        password_input = self.driver.find_element(By.ID, ":r3:")
        assert password_input is not None, "El campo de contraseña no existe"
        assert password_input.is_enabled(), "El campo de contraseña no está habilitado"
        password_input.click()

        # Validar botón de login
        login_button = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiButtonBase-root")
        assert login_button.is_displayed(), "El botón de login no está visible"
        actions = ActionChains(self.driver)
        actions.move_to_element(login_button).perform()

        password_input.send_keys("root")
        assert password_input.get_attribute(
            "value") == "root", "La contraseña no se ingresó correctamente"
        login_button.click()

        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        time.sleep(3)
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()

        # Validar elementos post-login
        main_div = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/div")
        assert main_div.is_displayed(), "El contenedor principal no está visible"
        main_div.click()

        # Validar botón con imagen
        img_button = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/header/div/div/div[3]/button[2]/img")
        assert img_button.is_displayed(), "El botón con imagen no está visible"
        img_button.click()

        # Validar enlace "Ver ofertas"
        ver_ofertas = self.driver.find_element(
            By.XPATH, "(//a[contains(text(),'Ver ofertas')])[2]")
        assert ver_ofertas.is_enabled(), "El enlace 'Ver ofertas' no está disponible"
        actions = ActionChains(self.driver)
        actions.move_to_element(ver_ofertas).perform()
        ver_ofertas.click()

        # Validar elementos del formulario de búsqueda
        autocomplete = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiAutocomplete-root:nth-child(1) .MuiSvgIcon-root")
        assert autocomplete.is_displayed(), "El autocomplete no está visible"
        actions = ActionChains(self.driver)
        actions.move_to_element(autocomplete).perform()

        input_field = self.driver.find_element(By.XPATH, "//input[@id=':r5:']")
        assert input_field.is_enabled(), "El campo de entrada no está habilitado"
        input_field.click()

        # Validar opciones del autocomplete
        option = self.driver.find_element(
            By.XPATH, "//li[@id=':r5:-option-0']")
        assert option.is_displayed(), "La opción del autocomplete no está visible"
        option.click()

        # Validar campos adicionales
        input_field2 = self.driver.find_element(
            By.XPATH, "//input[@id=':r9:']")
        assert input_field2.is_enabled(), "El segundo campo de entrada no está habilitado"
        input_field2.click()

        main_container = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/div/main")
        assert main_container.is_displayed(), "El contenedor principal no está visible"
        main_container.click()

        input_field3 = self.driver.find_element(
            By.XPATH, "//input[@id=':rd:']")
        assert input_field3.is_enabled(), "El tercer campo de entrada no está habilitado"
        input_field3.click()

        main_div2 = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/div/main/div")
        assert main_div2.is_displayed(), "El segundo contenedor principal no está visible"
        main_div2.click()

        # Validar botones finales
        element = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiButtonBase-root:nth-child(4)")
        assert element.is_enabled(), "El botón 4 no está habilitado"
        element.click()
        element = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiButtonBase-root:nth-child(5)")

        # ---
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiButtonBase-root:nth-child(5)")
        assert element.is_enabled(), "El botón no está habilitado"
        element.click()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(
            By.XPATH, "(//button[@type='button'])[11]")
        assert element.is_displayed(), "El botón 11 no está visible"
        assert element.is_enabled(), "El botón 11 no está habilitado"
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element.click()
        element = self.driver.find_element(
            By.XPATH, "(//button[@type='button'])[12]")
        assert element.is_enabled(), "El botón 12 no está habilitado"
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        time.sleep(2)
        confirm_button = self.driver.find_element(
            By.XPATH, "//div[2]/div/button")
        assert confirm_button.is_enabled(), "El botón de confirmación no está habilitado"
        confirm_button.click()
        element = self.driver.find_element(
            By.XPATH, "(//button[@type='button'])[11]")
        assert element.is_displayed(), "El botón 11 no está visible"
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element.click()
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        submit_button = self.driver.find_element(
            By.XPATH, "//button[@type='submit']")
        assert submit_button.is_displayed(), "El botón de submit no está visible"
        assert submit_button.is_enabled(), "El botón de submit no está habilitado"
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        submit_button.click()
        # Validar imagen del botón en el header
        header_img_button = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/header/div/div/div[3]/button[2]/img")
        assert header_img_button.is_enabled(
        ), "La imagen del botón en el header no está habilitado"
        actions = ActionChains(self.driver)
        actions.move_to_element(header_img_button).perform()

        # Validar segunda interacción con la imagen del botón
        assert header_img_button.is_enabled(
        ), "La imagen del botón en el header no está visible en la segunda interacción"
        actions = ActionChains(self.driver)
        actions.move_to_element(header_img_button).perform()
        time.sleep(3)
        # ---
        # Navigate to avatar/profile section
        avatar_button = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/header/div/div/div[3]/button[2]/img")
        assert avatar_button.is_enabled(), "Avatar button no está habilitado"
        avatar_button.click()

        # Hover and move to body
        body_element = self.driver.find_element(By.CSS_SELECTOR, "body")
        assert body_element.is_enabled(), "Body element no está habilitado"
        actions = ActionChains(self.driver)
        actions.move_to_element(body_element).perform()

        # Navigate to Applied Offers
        applied_offers_link = self.driver.find_element(
            By.XPATH, "(//a[contains(text(),'Ofertas aplicadas')])[2]")
        assert applied_offers_link.is_enabled(), "Applied Offers link no está habilitado"
        actions.move_to_element(applied_offers_link).perform()
        applied_offers_link.click()

        # Wait and interact with specific button
        time.sleep(2)
        specific_button = self.driver.find_element(
            By.XPATH, "(//button[@type='button'])[10]")
        assert specific_button.is_enabled(), "Specific button no está habilitado"
        actions.move_to_element(specific_button).perform()
        specific_button.click()

        # Hover to body again
        body_element = self.driver.find_element(By.CSS_SELECTOR, "body")
        assert body_element.is_enabled(), "Body element no está habilitado"
        actions.move_to_element(body_element).perform()

        # Submit action
        submit_button = self.driver.find_element(
            By.XPATH, "//button[@type='submit']")
        assert submit_button.is_enabled(), "Submit button no está habilitado"
        actions.move_to_element(submit_button).perform()
        submit_button.click()

        # Select profile/avatar
        avatar_image = self.driver.find_element(
            By.CSS_SELECTOR, ".MuiButtonBase-root > .MuiAvatar-root > img")
        assert avatar_image.is_enabled(), "Avatar image no está habilitado"
        actions = ActionChains(self.driver)
        actions.move_to_element(avatar_image).perform()
        time.sleep(2)
        avatar_image = self.driver.find_element(
            By.XPATH, "//div[@id='root']/div/header/div/div/div[4]/button/div/img")
        assert avatar_image is not None, "El menú de perfil no existe"
        avatar_image.click()
        # Hover to body again
        body_element = self.driver.find_element(By.CSS_SELECTOR, "body")
        assert body_element.is_enabled(), "Body element no está habilitado"
        actions.move_to_element(body_element).perform()

        # Open menu
        menu_item = self.driver.find_element(
            By.XPATH, "//div[@id='menu-appbar']/div[3]/ul/li[3]/p")
        assert menu_item.is_enabled(), "Menu item no está habilitado"
        menu_item.click()

        # Close driver
        self.driver.close()
